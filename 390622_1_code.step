{"block":{"name":"code","text":"<h3>Problem Statement</h3>\n\n<p>In this problem you will be implementing a Stack using a Singly Linked List. Implement the following functionalities of a stack ADT using a singly linked list.</p>\n\n<ul>\n\t<li>push(x) -- Push element x on the stack.</li>\n\t<li>pop() -- Remove the element from the top of the stack.</li>\n\t<li>peek() -- Return the element at the top of the stack.</li>\n\t<li>isEmpty() -- Return whether the stack is empty.</li>\n</ul>\n\n<h3>Constraints</h3>\n\n<ul>\n\t<li>\n\t<p>The values in the stack are integers, i.e. x is an integer.</p>\n\t</li>\n</ul>\n\n<h3>Note</h3>\n\n<ul>\n\t<li>Your Stack implementation (class Stack_LL) should use the Node Class given below to build your Singly Linked List.</li>\n</ul>\n\n<pre><code class=\"language-cpp\">class Node {\npublic:\n\tint data;\n\tNode* next;\n\tNode(int val) {data = val; next = nullptr;}\n\tNode(int val, Node* node) {data = val; next = node;}\n};</code></pre>\n\n<h3> </h3>\n\n<h3><strong>Hint</strong></h3>\n\n<ul>\n\t<li><samp>topPtr</samp> is a pointer that points to the top element of the stack. You could treat it as a head pointer for your linked list implementation. topPtr is a private data member that is available in the Stack_LL class.</li>\n</ul>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/0b7596f8-598f-48b1-9900-b3f52f81cacd/\"></p>\n\n<h3>Test cases</h3>\n\n<p>We will be testing your code and implementing the main( ) function. A description of the test cases is given below.</p>\n\n<ul>\n\t<li>The first line of the input is the operation we will be calling on your Stack object.</li>\n\t<li>The second line of input is the parameters that are passed to the corresponding operation in Line 1.</li>\n\t<li>The Output is the return value of the function call to the corresponding operation in Line 1. <em>null </em>in output means the function doesn't return anything. They are of type void. </li>\n\t<li>You may assume that all operations are valid (e.g. no pop or peek operations will be called on an empty stack).</li>\n</ul>\n\n<p><code><strong>Author: </strong>Lisha Zhou, <strong>Date Created</strong>: 13 May 2020, <strong>Last Modified</strong>: 14 May 2020</code></p>","video":null,"options":{"execution_time_limit":5,"execution_memory_limit":256,"limits":{"c++":{"time":5,"memory":256}},"code_templates":{"c++":"class Stack_LL {\nprivate:\n\t// topPtr points to the top element of the stack\npublic:\n\tStack_LL();\n\t~Stack_LL();\n\n\tbool isEmpty() const;\n\tvoid push(int newItem);\n\tvoid pop();\n\tint peek() const;\n};\n\nStack_LL::Stack_LL() {\n\n}\n\nStack_LL::~Stack_LL() {\n\n}\n\nbool Stack_LL::isEmpty() const {\n\n}\n\nvoid Stack_LL::push(int newItem) {\n\n}\n\nvoid Stack_LL::pop() {\n\n}\n\nint Stack_LL::peek() const {\n\n}"},"code_templates_header_lines_count":{"c++":14},"code_templates_footer_lines_count":{"c++":64},"code_templates_options":{},"samples":[["[push,push,pop,peek,push,push,peek,isEmpty]\n[[1],[2],[],[],[4],[12],[],[]]","[null, null, null, 1, null, null, 12, false]"]],"is_run_user_code_allowed":true},"subtitle_files":[],"source":{"code":"def generate():\n    \n    def create_feedback(input):\n        feedback = \"Incorrect answer: input was...\\n------------\\n{}\\n------------\".format(input)\n        return feedback\n    \n    def append_newline(input):\n        return input + '\\n'\n        \n    def zip_into_list(list_1, list_2):\n        return list(zip(list_1, list_2))\n    \n    tests = [\"[push,isEmpty,push,peek,pop,peek]\\n[[3],[],[10],[],[],[]]\",\n             \"[isEmpty,push,push,peek,pop,push,isEmpty]\\n[[],[35],[12],[],[],[19],[]]\",\n             \"[push,pop,isEmpty,push,push,peek,push,peek]\\n[[12],[],[],[9],[11],[],[34],[]]\",\n             \"[push,isEmpty,pop,isEmpty,push,push,push,push,isEmpty,peek]\\n[[4],[],[],[],[11],[12],[45],[99],[],[]]\"\n    ] #Put tests in here as strings without newlines at end - feedback will look mangled otherwise\n    correct_answers = [\"[null, false, null, 10, null, 3]\",\n                       \"[true, null, null, 12, null, null, false]\",\n                       \"[null, null, true, null, null, 11, null, 34]\",\n                       \"[null, false, null, true, null, null, null, null, false, 99]\"\n    ] #Put correct answers in here as strings\n    \n    list_of_feedback  = map(create_feedback, tests) #Generate list of feedback for tests\n    tests_with_newlines = map(append_newline, tests) #Add newlines to tests\n    \n    right_answers_with_feedback = zip_into_list(correct_answers, list_of_feedback)\n    tests_with_answers_and_feedback = zip_into_list(tests_with_newlines, right_answers_with_feedback) #Create list of [tests, [clues, feedback]]\n    \n    return tests_with_answers_and_feedback\n\n\ndef check(reply, clue):\n\n    compliments = [\"Good work!\",\n                   \"Brilliant!\",\n                   \"Alan Turing would be proud.\",\n                   \"You are a genius!\",\n                   \"Wowza!\"\n                ]\n                \n    if isinstance(clue, str):\n        if reply.strip() == clue.strip():\n            return True, compliments[len(reply) % 5]\n        else:\n            return False, \"Try again...\"\n    else:\n        if reply.strip() == clue[0].strip():\n            return True, compliments[len(reply) % 5]\n        else:\n            return False, clue[1]\n\n","execution_time_limit":5,"execution_memory_limit":256,"samples_count":2,"templates_data":"::c++\n::header\n\n#include <iostream>\n\n#include <iostream>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nclass Node {\npublic:\n\tint data;\n\tNode* next;\n\tNode(int val) {data = val; next = nullptr;}\n\tNode(int val, Node* node) {data = val; next = node;}\n};\n\n::code\nclass Stack_LL {\nprivate:\n\t// topPtr points to the top element of the stack\npublic:\n\tStack_LL();\n\t~Stack_LL();\n\n\tbool isEmpty() const;\n\tvoid push(int newItem);\n\tvoid pop();\n\tint peek() const;\n};\n\nStack_LL::Stack_LL() {\n    \n}\n\nStack_LL::~Stack_LL() {\n\n}\n\nbool Stack_LL::isEmpty() const {\n\t\n}\n\nvoid Stack_LL::push(int newItem) {\n\n}\n\nvoid Stack_LL::pop() {\n\t\n}\n\nint Stack_LL::peek() const {\n\t\n}\n        \n        \n::footer\nint main() {\n\tstring s;\n\tcin >> s;\n\ts = s.substr(1, s.length() - 2);\n\tstringstream data(s);\n\tstring line;\n\n\t\n\tvector<string> operation;\n\tvector<string> v;\n\t\n\twhile (getline(data, line, ',')) {\n\t\toperation.push_back(line);\n\t}\n\t\n\tstring str;\n\tcin >> str;\n\tstr = str.substr(1, str.length() - 2);\n\tstringstream value(str);\n\tstring aline;\n\n\n\twhile (getline(value, aline, ',')) {\n\t\tv.push_back(aline.substr(1, aline.length() - 2));\n\t}\n\n\tStack_LL q;\n\tvector<string> res;\n\tfor (int i = 0; i < operation.size(); i++) {\n\t\t//cout << operation[i] << \" \" << v[i] << endl;\n\t\tif (operation[i] == \"push\") {\n\t\t\t//cout << \"v[i] \" << v[i] << endl;\n\t\t\t//cout << stoi(v[i]) << endl;\n\t\t\tq.push(stoi(v[i]));\n\t\t\tres.push_back(\"null\");\n\t\t}\n\t\telse if (operation[i] == \"isEmpty\") {\n\t\t\tif (q.isEmpty())\n\t\t\t\tres.push_back(\"true\");\n\t\t\telse\n\t\t\t\tres.push_back(\"false\");\n\t\t}\n\t\telse if (operation[i] == \"peek\") {\n\t\t\tif (!q.isEmpty())\n\t\t\t\tres.push_back(to_string(q.peek()));\n\t\t\telse\n\t\t\t\tres.push_back(\"null\");\n\t\t}\n\t\telse if (operation[i] == \"pop\") {\n\t\t\tq.pop();\n\t\t\tres.push_back(\"null\");\n\t\t}\n\t}\n\tcout << \"[\";\n\tint index;\n\tfor (index = 0; index < res.size(); index++) {\n\t\tif (index != res.size() - 1)\n\t\t\tcout << res[index] << \", \";\n\t\telse\n\t\t\tcout << res[index];\n\t}\n\tcout << \"]\" << endl;\n\n}\n\n\n\n\n\n\n\n","is_time_limit_scaled":true,"is_memory_limit_scaled":true,"is_run_user_code_allowed":true,"manual_time_limits":[],"manual_memory_limits":[],"test_archive":[],"test_cases":[["[push,push,pop,peek,push,push,peek,isEmpty]\n[[1],[2],[],[],[4],[12],[],[]]","[null, null, null, 1, null, null, 12, false]"]],"are_all_tests_scored":true,"are_all_tests_run":true},"subtitles":{},"tests_archive":"/api/step-sources/1480349/tests","feedback_correct":"","feedback_wrong":""},"id":"1480349","has_review":false,"time":"2020-11-18T21:19:25.059Z"}